{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#react-calendar-documentation-installation-usage-and-customization-guide","title":"React Calendar Documentation: Installation, Usage, and Customization Guide","text":"<p>Welcome to our documentation for React Calendar! \ud83d\udcd6 In this guide, you will learn how to install and use the React Calendar package, as well as customize it to suit your needs.</p> <p>For full official npm documentation visit npm-React-Calendar</p> <p>For React Calendars official webpage visit React-Calendar</p> <p>Want to try a live demo? Visit Live Demo</p>"},{"location":"#what-is-react-calendar","title":"What is React Calendar? \ud83d\udcc6","text":"<p>React Calendar is a lightweight calendar package designed for use in React applications. It provides a simple and customizable way to display calendars and schedule events. It is currently being managed by a developer under the name Wojciech Maj. The developer has made this amazing tool light and fast, extremely customizable, work with any language, rock-solid/bug-free, and best of all open source! (forever)</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>Our documentation is targeted towards the following users:</p> <p>Beginner developers who need to set up a React Calendar for a personal project.</p> <p>Info</p> <p>Prerequisites:</p> <ul> <li>Basic understanding of Command Line Interface.</li> <li>Basic understanding of Visual Studio Code.</li> <li>Basic proficiency of Node package manager.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To use React Calendar in your project, you'll need to have the following pre-requisites installed:</p> <p>Node JS Node Environment is required to use React and React Calendar</p> <p>Visual Studio Code Working with documentation requires a text editor, please install VS Code or you can work with your favorite text editor</p> <p> </p> React Calendar"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Once you have React Calendar installed, you can use it in your React application by importing the Calendar component and rendering it in your component. If you are not familiar with React, this may be a difficult task at first, that's why we are going to show you. \ud83d\ude0e Here's an example of how to use React Calendar in a basic React component:</p> <pre><code>import React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nfunction MyApp() {\nconst [value, onChange] = useState(new Date());\nreturn (\n&lt;div&gt;\n&lt;Calendar onChange={onChange} value={value} /&gt;\n&lt;/div&gt;\n);\n}\nexport default MyApp;\n</code></pre> <p>So in this example, we are importing the Calendar component from the react-calendar package and using the useState hook to manage the state of the selected date. State manages the variables binded to a react component.</p> <p>If you're not familiar with React hooks, you can find out more about them here</p> <p>We then render the Calendar component with the onChange and value props to enable date selection and update the selected date state.</p> <p>This is just a basic example of how to use React Calendar, and that you can definitely customize it to suit your needs by passing additional props and styles to the Calendar component as needed.</p>"},{"location":"#advanced-usage","title":"Advanced Usage","text":"<p>Once you've gotten the hang of things mentioned above in the basic usage section, you might be interested in getting more advanced with React Calendar.</p> <p>Thankfully, React Calendar provides many props and options for customization. Here are some common props that you can use to customize your calendar:</p> <p>Info</p> <p>Again, please keep in mind that there are many more available props to use.</p> <p>You can find a list of all of the available props here</p>"},{"location":"#props","title":"Props","text":"<p>Props are the arguements passed to a react component. Props determines the behavior of a component.</p> <ul> <li><code>value</code> : sets the selected date.</li> <li><code>onChange</code> : a function that is called when the date selection changes.</li> <li><code>minDate</code> and <code>maxDate</code> : sets the minimum and maximum selectable dates.</li> <li><code>calendarType</code> : sets the calendar type (e.g., US or ISO 8601).</li> <li><code>showNavigation</code> : shows or hides the navigation buttons.</li> <li><code>tileClassName</code> : a function that is called for each tile to set the class name.</li> <li><code>tileContent</code> : a function that is called for each tile to set the content.</li> </ul>"},{"location":"#styling","title":"Styling","text":"<p>If you want to use default Calendar styling to build upon its existings syles, you can import React-Calendar's styles by importing Calendar.css</p> <pre><code>import 'react-calendar/dist/Calendar.css';\n</code></pre>"},{"location":"#note-and-warning-messages","title":"Note and warning messages","text":"<p>In the documentation you will see a series of indicator messages with different meanings. The messages will be as follows:</p> <p>Danger</p> <p>Specifies actions that may cause an error or will cause the application to crash.</p> <p>Warning</p> <p>Specifies content that must be read before proceeding, so please pay attention!</p> <p>Info</p> <p>Indicates additional information or tips.</p> <p>Success</p> <p>Indicates you successfully completed a section or task, good job!</p>"},{"location":"#conclusion","title":"Conclusion","text":"<p>As shown in the diagram below react calendar has styles and event listeners that can be attached to it. Furthermore, React calendar is dependency for React which is used for front-end web development.</p> <pre><code>graph LR\n  A[React] --&gt;| Framework | B[Frontend];\n  C[React Caledar] --&gt;| Package | A[React]\n  D[Event Listeners] --&gt; | Attached | C\n  E[Styles] --&gt; C</code></pre> <p>We hope you find our React Calendar documentation helpful! If you have any questions or feedback, please do not hesitate to contact us.</p>"},{"location":"#contributers","title":"Contributers","text":"<p>Jack Boeri - jboeri@my.bcit.ca</p> <p>Paarth Dhammi - pdhammi@my.bcit.ca</p> <p>Happy coding! \ud83d\ude04</p>"},{"location":"pages/eventlistener/","title":"Event Listeners","text":""},{"location":"pages/eventlistener/#overview","title":"Overview","text":"<p>This section will walk you through how to manipulate your calendar with code examples.</p> <p>Info</p> <p>React Calendar is a powerful tool that can be used to create interactive and customizable calendars in your React applications. With React Calendar, you can manipulate the data and the calendar itself by using React props.</p> <pre><code>import Calendar from 'react-calendar'\nfunction App() {\nreturn (\n&lt;div className=\"App\"&gt;\n&lt;Calendar onClickDay={(value, event) =&gt; alert(value)} minDate={new Date()} /&gt;\n&lt;/div&gt;\n);\n}\nexport default App;\n</code></pre>"},{"location":"pages/eventlistener/#props","title":"Props","text":"<p>React Calendar comes with several props that allow you to customize its appearance and behavior. Props are the arguements we can pass to a react component.</p> <p><code>onChange</code></p> <p>Type: function</p> <p>A function that gets called every time the user selects a new date. The function receives the selected date as an argument. <code>handleDateChange</code> would be defined outside of your App function. The line <code>&lt;Calendar onChange={handleDateChange} /&gt;</code> would be called inside the return statement of the App component. <pre><code>function handleDateChange(date) {\nconsole.log(`Selected date: ${date}`);\n}\n&lt;Calendar onChange={handleDateChange} /&gt;\n</code></pre></p> <p><code>value</code> Type: Date</p> <p>The currently selected date. This prop is required if you want to use React Calendar as a controlled component.</p> <p><pre><code>&lt;Calendar value={new Date()} /&gt;\n</code></pre> <code>minDate</code> Type: Date</p> <p>The minimum date that can be selected. Users won't be able to select a date earlier than this date.</p> <p><pre><code>&lt;Calendar minDate={new Date('2022-01-01')} /&gt;\n</code></pre> <code>maxDate</code> Type: Date</p> <p>The maximum date that can be selected. Users won't be able to select a date later than this date. <pre><code>&lt;Calendar maxDate={new Date('2022-12-31')} /&gt;\n</code></pre></p> <p><code>tileClassName</code> Type: function | string | string[]</p> <p>A function that gets called for each tile and returns a string with the CSS class name(s) to apply to the tile. Alternatively, you can pass a string or an array of strings with the CSS class name(s) to apply to all tiles.</p> <pre><code>function getTileClassName({ activeStartDate, date, view }) {\nif (view === 'month' &amp;&amp; date.getDay() === 0) {\nreturn 'sunday';\n}\n}\n&lt;Calendar tileClassName={getTileClassName} /&gt;\n</code></pre> <p><code>tileContent</code> Type: function | React.ReactNode</p> <p>A function that gets called for each tile and returns a React node to render inside the tile. Alternatively, you can pass a React node to render inside all tiles.</p> <pre><code>function getTileContent({ date }) {\nreturn &lt;div&gt;{date.getDate()}&lt;/div&gt;;\n}\n&lt;Calendar tileContent={getTileContent} /&gt;\n</code></pre>"},{"location":"pages/eventlistener/#list-of-props","title":"List of props","text":"<p>React Calendar provides many props that you can use to customize its appearance and behavior. Here are some of the most commonly used props:</p> <ul> <li> <p><code>value</code> : This prop allows you to set the currently selected date in the calendar. You can use it to control the calendar from outside.</p> </li> <li> <p><code>view</code> : This prop allows you to set the initial view of the calendar (month, week, or day).</p> </li> <li> <p><code>calendarType</code> : sets the calendar type (e.g., US or ISO 8601).</p> </li> <li> <p><code>minDate</code> and <code>maxDate</code> : These props allow you to set the minimum and maximum selectable dates in the calendar. You can use them to restrict the dates that users can select.</p> </li> <li> <p><code>onActiveStartDateChange</code> : This prop handles when the user navigates from one view to another using previous/next button. Note: This function will not be called when drilling up/down.</p> </li> <li> <p><code>onChange</code> : This prop handles when the user clicks an item (day on month view, month on year view and so on) on the most detailed view available.</p> </li> <li> <p><code>onViewChange</code> : This prop is called when the user navigates from one view to another using drill up button or by clicking a tile.</p> </li> <li> <p><code>onDrillUp</code>/<code>onDrillDown</code> : Function called when the user drills up by clicking drill up button.</p> </li> <li> <p><code>showNavigation</code> : shows or hides the navigation buttons.</p> </li> <li> <p><code>tileClassName</code> : a function that is called for each tile to set the class name.</p> </li> <li> <p><code>tileContent</code> : a function that is called for each tile to set the content.</p> </li> <li> <p><code>onClickDay</code>/<code>onClickDecade</code>/<code>onClickMonth</code>/<code>onClickWeekNumber</code>/<code>onClickYear</code> : This prop allows you to set a callback function that is called when a user clicks on a certain area in the calendar. The function receives two arguments: the value of the clicked area, and the original click event.</p> </li> <li> <p><code>onKeyDown</code> : This prop allows you to set a callback function that is called when a user presses a key while the calendar is in focus. The function receives two arguments: the key event, and the value of the currently focused date.</p> </li> </ul>"},{"location":"pages/eventlistener/#conclusion","title":"Conclusion","text":"<p>Success</p> <p>Now you should have a react calendar component with event listeners attached to it!</p>"},{"location":"pages/glossary/","title":"Glossary","text":"Term Definition Dependency Code  that is required for the current application to run. ES6 ES6 stands for ECMAScript 6, otherwise knowns as ECMAScript 2015. It is the most recent major version of the stadard for JavaScript. Frontend The components of a website that handle styling and client interactions Localhost A default alias referring to the local computer or \"this computer's\" IP address which is 127.0.0.1 Packages Name of the code packages described in package.json ReactJS Javascript framework to create web applications."},{"location":"pages/project-structure/","title":"Project Structure","text":""},{"location":"pages/project-structure/#overview","title":"Overview","text":"<p>Having a clear project structure is essential to collaborate on a web application. Also, it is important as it helps developers create new files following the existing conventions and helps them edit the existing files.</p> <p>Warning</p> <p>Do not run these commands if you already have a project structure</p> <p>Info</p> <p>This is a reference page for developers, we have already created the app on installing react calendar page.</p> <p>We can create a new react application using the following command</p> <p><pre><code>npx create-react-app calendar\n</code></pre> React provide a solid structure to work upon. The default file structure after creating a new react application would look like the below:</p> <pre><code>calendar\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 public\n\u2502   \u251c\u2500\u2500 favicon.ico\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u251c\u2500\u2500 logo192.png\n\u2502   \u251c\u2500\u2500 logo512.png\n\u2502   \u251c\u2500\u2500 manifest.json\n\u2502   \u2514\u2500\u2500 robots.txt\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 App.css\n    \u251c\u2500\u2500 App.js\n    \u251c\u2500\u2500 App.test.js\n    \u251c\u2500\u2500 index.css\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 logo.svg\n    \u251c\u2500\u2500 reportWebVitals.js\n    \u2514\u2500\u2500 setupTests.js\n</code></pre> <p>There are other ways to struture the app</p> <p>Info</p> <p>Grouping by features or routes</p> <pre><code>common/\n  Avatar.js\n  Avatar.css\n  APIUtils.js\n  APIUtils.test.js\nfeed/\n  index.js\n  Feed.js\n  Feed.css\n  FeedStory.js\n  FeedStory.test.js\n  FeedAPI.js\nprofile/\n  index.js\n  Profile.js\n  ProfileHeader.js\n  ProfileHeader.css\n  ProfileAPI.js\n</code></pre> <p>Info</p> <p>Grouping by file type</p> <pre><code>api/\n  APIUtils.js\n  APIUtils.test.js\n  ProfileAPI.js\n  UserAPI.js\ncomponents/\n  Avatar.js\n  Avatar.css\n  Feed.js\n  Feed.css\n  FeedStory.js\n  FeedStory.test.js\n  Profile.js\n  ProfileHeader.js\n  ProfileHeader.css\n</code></pre>"},{"location":"pages/project-structure/#creating-and-navigating-between-files-and-folders","title":"Creating and navigating between files and folders","text":"<p>Create a new directory test</p> <p>mkdir test</p> <p>Change directory</p> <p>cd test</p> <p>Create a new javascript file</p> <p>touch calendar.js</p> <p>Opening file in Visual Studio Code</p> <p>code calendar.js</p>"},{"location":"pages/project-structure/#conclusion","title":"Conclusion","text":"<p>Success</p> <p>By the end of this section, you will have successfully learned the following:</p> <ul> <li>Why project structure is important</li> <li>Different styles of project structures</li> <li>How to customize the project structure</li> </ul>"},{"location":"pages/setup/","title":"Installing React Calendar","text":""},{"location":"pages/setup/#overview","title":"Overview","text":"<p>In this section we will walk through the installation of React Calendar which involves creating a new project directory, installing React 16.3 or later, and importing the Calendar component in the App.js file. </p>"},{"location":"pages/setup/#installation-steps-for-react-calendar","title":"Installation Steps for React Calendar","text":"<p>Warning</p> <p>As for Compatibility, your project needs to use React 16.3 or later.</p> <p>React Calendar uses modern web technologies. That's why it's so fast, lightweight and easy to style. This, however, comes at a cost of supporting only modern browsers.</p> <p>Info</p> <p>Please be patient as installing react on your system may take a few minutes</p> <ol> <li>Create a new project directory <p>npx create-react-app my-app</p> </li> <li>In Visual Studio Code, open your desired terminal in your current project directory <p>cd my-app</p> </li> <li>To install react-calendar <p>npm install react-calendar</p> </li> <li>Run the following commands in order: <p>npm start</p> </li> </ol> <p> 4. In <code>my-app/src/App.js</code> import react-calendar <pre><code>import Calendar from 'react-calendar'\n</code></pre> 5. Replace the return code block of the App function with code below  <pre><code>return (\n&lt;Calendar /&gt;\n);\n</code></pre></p> <p>Example of <code>/App.js</code> file: <pre><code>import './App.css';\nimport Calendar from 'react-calendar'\nfunction App() {\nreturn (\n&lt;Calendar /&gt;\n);\n}\nexport default App;\n</code></pre></p> <p>Everything you need to access/manipulate with React Calendar is going to be found on the Calendar Components props. You can find more about the interactivity and customization of your calendar here: Event Listeners, Styling</p>"},{"location":"pages/setup/#conclusion","title":"Conclusion","text":"<p>Success</p> <p>You have successfully intergrated react calendar with react application.</p> <p>You should now have a working React Calendar in your React Application. Great work!</p>"},{"location":"pages/styling/","title":"Styling React Calendar","text":""},{"location":"pages/styling/#overview","title":"Overview","text":"<p>React Calendar is fully open-source providing flexibility to all developers to use the calendar as they choose. As for the overall appearance of your calendar, we recommend importing our default css stylesheet and tweak accordingly as this calendar component was meant to handle the javascript logic for you.</p> <p>The first image shows what it will look like after setting up.</p> <p>The second image shows the Calendar with the default stylesheet imported.</p> <p> </p>"},{"location":"pages/styling/#customization","title":"Customization","text":"<p>Customizing your Calendar Custom styling - If you want to use default React-Calendar styling to build upon its existings syles, you can import React-Calendar's styles by importing react-calendars default css file (this will make it easier to customize as you can see existing styles): <pre><code>import 'react-calendar/dist/Calendar.css';\n</code></pre></p> <p>You can either manually copy the css file for the Calendar component and make changes as you wish <pre><code>node_modules/react-calender/dist/Calender.css\n</code></pre> Or, you can either import the css file directly</p> <pre><code>import 'react-calendar/dist/Calendar.css';\n</code></pre> <p><code>Calendar.css</code> looks something like this: <pre><code>.react-calendar {\nwidth: 350px;\nmax-width: 100%;\nbackground: white;\nborder: 1px solid #a0a096;\nfont-family: Arial, Helvetica, sans-serif;\nline-height: 1.125em;\n}\n.react-calendar--doubleView {\nwidth: 700px;\n}\n.react-calendar--doubleView .react-calendar__viewContainer {\ndisplay: flex;\nmargin: -0.5em;\n}\n.react-calendar--doubleView .react-calendar__viewContainer &gt; * {\nwidth: 50%;\nmargin: 0.5em;\n}\n.react-calendar,\n.react-calendar *,\n.react-calendar *:before,\n.react-calendar *:after {\n-moz-box-sizing: border-box;\n-webkit-box-sizing: border-box;\nbox-sizing: border-box;\n}\n.react-calendar button {\nmargin: 0;\nborder: 0;\noutline: none;\n}\n.react-calendar button:enabled:hover {\ncursor: pointer;\n}\n.react-calendar__navigation {\nheight: 44px;\nmargin-bottom: 1em;\n}\n.react-calendar__navigation button {\nmin-width: 44px;\nbackground: none;\n}\n</code></pre></p>"},{"location":"pages/troubleshooting/","title":"Troubleshooting","text":"Symptoms Probable Cause Action Unable to load the localhost page Your URL does not match your port number. Double check in the browser if the app is running on localhost 3000. The port 3000 is already taken You can free a port using <code>killall node</code> command in the terminal. No module found Missing dependencies Installl the missing dependencies using <code>npm install dependency-name</code> Conflicting dependencies Dependencies/Packages are incompatible. <code>npm install</code> gives error use <code>npm install --legacy-peer-deps</code> instead."}]}