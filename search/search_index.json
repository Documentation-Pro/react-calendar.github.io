{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-react-calendar","title":"Welcome to React Calendar","text":"<p>React-Calendar is the ultimate lightweight Calendar for your React application. Please note that React-Calendar is under constant development and if you would like to see official documentation, please go to the following link.</p> <p>For full documentation visit npm-React-Calendar</p> <p>For React Calendars official webpage visit React-Calendar</p> <p>Want to try a live demo? Visit Live Demo</p> <p> </p> React Calendar"},{"location":"#pre-requisite","title":"Pre-requisite","text":"<pre><code>React\nnpm\n</code></pre>"},{"location":"#install","title":"Install","text":"<ul> <li>Install by executing <code>npm install react-calendar</code> or <code>yarn add react-calendar</code></li> <li>Import by adding <code>import Calendar from 'react-calendar'</code></li> <li>Use by adding <code>&lt;Calendar /&gt;</code> </li> </ul>"},{"location":"#setup","title":"Setup","text":"<ul> <li> <p><code>Compatibility</code> Your project needs to use React 16.3 or later.</p> </li> <li> <p><code>React-Calendar</code> uses modern web technologies. That's why it's so fast, lightweight and easy to style. This, however, comes at a cost of supporting only modern browsers.</p> </li> <li> <p><code>Legacy browsers</code> If you need to support legacy browsers like Internet Explorer 10, you will need to use Intl.js or another Intl polyfill along with React-Calendar.</p> </li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Here's an example of basic usage:</p> <pre><code>    import React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nfunction MyApp() {\nconst [value, onChange] = useState(new Date());\nreturn (\n&lt;div&gt;\n&lt;Calendar onChange={onChange} value={value} /&gt;\n&lt;/div&gt;\n);\n}\n</code></pre>"},{"location":"#customizing-your-calendar","title":"Customizing your Calendar","text":"<ul> <li><code>Custom styling</code> - If you want to use default React-Calendar styling to build upon its existings syles, you can import React-Calendar's styles by importing react-calendars default css file (this will make it easier to customize as you can see existing styles):</li> </ul> <pre><code>import 'react-calendar/dist/Calendar.css';\n</code></pre>"},{"location":"pages/eventlistener/","title":"Event Listeners","text":""},{"location":"pages/eventlistener/#overview","title":"Overview","text":"<p>React Calendar is a simple and easy-to-use library for adding calendar functionality to your React application. As for event listening such as onCLick, React Calendar can customize the appearance and behavior of the calendar using various props.</p>"},{"location":"pages/eventlistener/#customization","title":"Customization","text":"<p>React Calendar provides many props that you can use to customize its appearance and behavior. Here are some of the most commonly used props:</p> <p><code>value</code>: This prop allows you to set the currently selected date in the calendar. You can use it to control the calendar from outside.</p> <p><code>view</code>: This prop allows you to set the initial view of the calendar (month, week, or day).</p> <p><code>minDate</code> and <code>maxDate</code>: These props allow you to set the minimum and maximum selectable dates in the calendar. You can use them to restrict the dates that users can select.</p> <p><code>onActiveStartDateChange</code>: This prop handles when the user navigates from one view to another using previous/next button. Note: This function will not be called when drilling up/down.</p> <p><code>onChange</code>: This prop handles when the user clicks an item (day on month view, month on year view and so on) on the most detailed view available.</p> <p><code>onViewChange</code>: This prop is called when the user navigates from one view to another using drill up button or by clicking a tile.</p> <p><code>onDrillUp</code>/<code>onDrillDown</code>: Function called when the user drills up by clicking drill up button.</p> <p><code>onClickDay</code>/<code>onClickDecade</code>/<code>onClickMonth</code>/<code>onClickWeekNumber</code>/<code>onClickYear</code>: This prop allows you to set a callback function that is called when a user clicks on a certain area in the calendar. The function receives two arguments: the value of the clicked area, and the original click event.</p> <p><code>onKeyDown</code>: This prop allows you to set a callback function that is called when a user presses a key while the calendar is in focus. The function receives two arguments: the key event, and the value of the currently focused date.</p> <p>You can also use CSS to style the calendar as per your requirements. The calendar component exposes several class names that you can use to target specific elements in the calendar.</p>"},{"location":"pages/eventlistener/#conclusion","title":"Conclusion","text":"<p>As shown below, you can change the behaviour of your custom calendar by using props. You can read the selected date value from the calendar using the onClickDay prop. The same logic applies to using other props that listen for other events. </p> <pre><code>import Calendar from 'react-calendar'\nfunction App() {\nreturn (\n&lt;div className=\"App\"&gt;\n&lt;Calendar onClickDay={(value, event) =&gt; alert(value)} minDate={new Date()} /&gt;\n&lt;/div&gt;\n);\n</code></pre>"},{"location":"pages/glossary/","title":"Glossary","text":""},{"location":"pages/project-structure/","title":"Project Structure","text":""},{"location":"pages/project-structure/#overview","title":"Overview","text":"<p>Understanding the project structure is important. It is also essential to have a clear project structure while collaborating on a project.</p>"},{"location":"pages/project-structure/#customization","title":"Customization","text":"<p>Users can customize their react apps however they want. But in this documentation we would go over the project structure from the official react documentation and how to integrate React-Calendar with it. </p> <p>There are usually two ways to structure a react app. </p> <ul> <li>Grouping by features or routes </li> </ul> <pre><code>api/\n  APIUtils.js\n  APIUtils.test.js\n  ProfileAPI.js\n  UserAPI.js\ncomponents/\n  Avatar.js\n  Avatar.css\n  Feed.js\n  Feed.css\n  FeedStory.js\n  FeedStory.test.js\n  Profile.js\n  ProfileHeader.js\n  ProfileHeader.css\n</code></pre> <ul> <li>Grouping by file type  <pre><code>common/\n  Avatar.js\n  Avatar.css\n  APIUtils.js\n  APIUtils.test.js\nfeed/\n  index.js\n  Feed.js\n  Feed.css\n  FeedStory.js\n  FeedStory.test.js\n  FeedAPI.js\nprofile/\n  index.js\n  Profile.js\n  ProfileHeader.js\n  ProfileHeader.css\n  ProfileAPI.js\n</code></pre></li> </ul> <p>Default setup from react <pre><code>calendar\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 public   #The public directory deployed on the internet\n\u2502   \u251c\u2500\u2500 favicon.ico\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u251c\u2500\u2500 logo192.png\n\u2502   \u251c\u2500\u2500 logo512.png\n\u2502   \u251c\u2500\u2500 manifest.json\n\u2502   \u2514\u2500\u2500 robots.txt #tells search engine crawlers which URLs the crawler can access on your site.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 App.css   # Stylesheet for App component\n    \u251c\u2500\u2500 App.js    # Main component for our application\n    \u251c\u2500\u2500 App.test.js # Tests for the App component\n    \u251c\u2500\u2500 index.css \n    \u251c\u2500\u2500 index.js # index file where all the components are rendered.\n    \u251c\u2500\u2500 logo.svg # Vector logo image\n    \u251c\u2500\u2500 reportWebVitals.js\n    \u2514\u2500\u2500 setupTests.js\n</code></pre></p>"},{"location":"pages/project-structure/#conclusion","title":"Conclusion","text":""},{"location":"pages/setup/","title":"Setup Project","text":""},{"location":"pages/setup/#setup-react-calendar","title":"Setup React Calendar","text":"<ol> <li>Create a new project directory</li> <li>Open your desired terminal</li> <li>Run the following commands in order: <pre><code>npx create-react-app my-app\ncd my-app\nnpm start\n</code></pre> </li> <li>In <code>my-app/src/App.js</code> import react-calendar <pre><code>import Calendar from 'react-calendar'\n</code></pre></li> <li>return the Calendar component in your App function <pre><code>return (\n&lt;Calendar /&gt;\n);\n</code></pre></li> </ol> <p>Your App.js file should look like this: <pre><code>import './App.css';\nimport Calendar from 'react-calendar'\nfunction App() {\nreturn (\n&lt;Calendar /&gt;\n);\n}\nexport default App;\n</code></pre></p>"},{"location":"pages/setup/#general-usage","title":"General Usage","text":"<p>Everything you need to access/manipulate with React Calendar is going to be found on the Calendar Components props. You can find about more about the interactivity of your calendar here: Event Listeners</p>"},{"location":"pages/styling/","title":"Styling","text":""},{"location":"pages/styling/#overview","title":"Overview","text":"<p>React Calendar is fully open-source providing flexibility to all developers to use the calendar as they choose. As for the overall appearance of your calendar, we recommend importing our default css stylesheet and tweak accordingly.</p>"},{"location":"pages/styling/#customization","title":"Customization","text":"<p>Customizing your Calendar Custom styling - If you want to use default React-Calendar styling to build upon its existings syles, you can import React-Calendar's styles by importing react-calendars default css file (this will make it easier to customize as you can see existing styles): <pre><code>import 'react-calendar/dist/Calendar.css';\n</code></pre></p>"},{"location":"pages/styling/#conclusion","title":"Conclusion","text":"<p>In your node_modules / react-calender / dist / Calender.css, you will find the styles for your React Calendar. You can either import them or copy and paste the css file from the directory /node_modules/react-calender/dist/Calender.css.</p> <p><code>Calendar.css</code> looks something like this: <pre><code>.react-calendar {\nwidth: 350px;\nmax-width: 100%;\nbackground: white;\nborder: 1px solid #a0a096;\nfont-family: Arial, Helvetica, sans-serif;\nline-height: 1.125em;\n}\n.react-calendar--doubleView {\nwidth: 700px;\n}\n.react-calendar--doubleView .react-calendar__viewContainer {\ndisplay: flex;\nmargin: -0.5em;\n}\n.react-calendar--doubleView .react-calendar__viewContainer &gt; * {\nwidth: 50%;\nmargin: 0.5em;\n}\n.react-calendar,\n.react-calendar *,\n.react-calendar *:before,\n.react-calendar *:after {\n-moz-box-sizing: border-box;\n-webkit-box-sizing: border-box;\nbox-sizing: border-box;\n}\n.react-calendar button {\nmargin: 0;\nborder: 0;\noutline: none;\n}\n.react-calendar button:enabled:hover {\ncursor: pointer;\n}\n.react-calendar__navigation {\nheight: 44px;\nmargin-bottom: 1em;\n}\n.react-calendar__navigation button {\nmin-width: 44px;\nbackground: none;\n}\n</code></pre></p>"}]}