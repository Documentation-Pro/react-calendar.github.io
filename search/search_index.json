{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-react-calendar","title":"Welcome to React Calendar","text":"<p>React-Calendar is the ultimate lightweight Calendar for your React application. Please note that React-Calendar is under constant development and if you would like to see official documentation, please go to the following link.</p> <p>For full documentation visit npm-React-Calendar</p> <p>For React Calendars official webpage visit React-Calendar</p> <p>Want to try a live demo? Visit Live Demo</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>This documentation is targeted towards the following users:</p> <ul> <li>Beginner to intermediate developers who need to setup a React Calendar for a personal project.</li> <li>Software development teams working on small or medium-sized web applications.</li> </ul> <p> </p> React Calendar"},{"location":"#pre-requisite","title":"Pre-requisite","text":"<pre><code>React\nnpm\n</code></pre>"},{"location":"#install","title":"Install","text":"<ul> <li>Install by executing <code>npm install react-calendar</code> or <code>yarn add react-calendar</code></li> <li>Import by adding <code>import Calendar from 'react-calendar'</code></li> <li>Use by adding render component <code>&lt;Calendar /&gt;</code> </li> </ul> <p>for a more detailed install guide, click here</p>"},{"location":"#usage","title":"Usage","text":"<p>Here's an example of basic usage:</p> <pre><code>    import React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nfunction MyApp() {\nconst [value, onChange] = useState(new Date());\nreturn (\n&lt;div&gt;\n&lt;Calendar onChange={onChange} value={value} /&gt;\n&lt;/div&gt;\n);\n}\n</code></pre>"},{"location":"#customizing-your-calendar","title":"Customizing your Calendar","text":"<p>Custom styling - If you want to use default React-Calendar styling to build upon its existings syles, you can import React-Calendar's styles by importing react-calendars default css file (this will make it easier to customize as you can see existing styles):</p> <pre><code>import 'react-calendar/dist/Calendar.css';\n</code></pre>"},{"location":"#note-and-warning-messages","title":"Note and warning messages","text":"<p>Danger</p> <p>Specifies actions that may cause an error or will cause the application to crash.</p> <p>Warning</p> <p>Specifies content that must be read before proceeding.</p> <p>Info</p> <p>Indicates additional information or tips.</p> <p>Success</p> <p>Indicates what success looks like.</p>"},{"location":"pages/eventlistener/","title":"Event Listeners","text":""},{"location":"pages/eventlistener/#overview","title":"Overview","text":"<p>This section will walk you through how to manipulate your calendar and perform CRUD operations. Afterwards, you will be shown an example via code.</p> <p>Info</p> <p>React Calendar is a powerful tool that can be used to create interactive and customizable calendars in your React applications. With React Calendar, you can manipulate the data and the calendar itself by using React props.</p>"},{"location":"pages/eventlistener/#props","title":"Props","text":"<p>React Calendar provides many props that you can use to customize its appearance and behavior. Here are some of the most commonly used props:</p> <ul> <li> <p><code>value</code>: This prop allows you to set the currently selected date in the calendar. You can use it to control the calendar from outside.</p> </li> <li> <p><code>view</code>: This prop allows you to set the initial view of the calendar (month, week, or day).</p> </li> <li> <p><code>minDate</code> and <code>maxDate</code>: These props allow you to set the minimum and maximum selectable dates in the calendar. You can use them to restrict the dates that users can select.</p> </li> <li> <p><code>onActiveStartDateChange</code>: This prop handles when the user navigates from one view to another using previous/next button. Note: This function will not be called when drilling up/down.</p> </li> <li> <p><code>onChange</code>: This prop handles when the user clicks an item (day on month view, month on year view and so on) on the most detailed view available.</p> </li> <li> <p><code>onViewChange</code>: This prop is called when the user navigates from one view to another using drill up button or by clicking a tile.</p> </li> <li> <p><code>onDrillUp</code>/<code>onDrillDown</code>: Function called when the user drills up by clicking drill up button.</p> </li> <li> <p><code>onClickDay</code>/<code>onClickDecade</code>/<code>onClickMonth</code>/<code>onClickWeekNumber</code>/<code>onClickYear</code>: This prop allows you to set a callback function that is called when a user clicks on a certain area in the calendar. The function receives two arguments: the value of the clicked area, and the original click event.</p> </li> <li> <p><code>onKeyDown</code>: This prop allows you to set a callback function that is called when a user presses a key while the calendar is in focus. The function receives two arguments: the key event, and the value of the currently focused date.</p> </li> </ul> <p>You can also use CSS to style the calendar as per your requirements. The calendar component exposes several class names that you can use to target specific elements in the calendar.</p>"},{"location":"pages/eventlistener/#conclusion","title":"Conclusion","text":"<p>As shown below, you can change the behaviour of your custom calendar by using props. You can read the selected date value from the calendar using the onClickDay prop. The same logic applies to using other props that listen for other events. </p> <pre><code>import Calendar from 'react-calendar'\nfunction App() {\nreturn (\n&lt;div className=\"App\"&gt;\n&lt;Calendar onClickDay={(value, event) =&gt; alert(value)} minDate={new Date()} /&gt;\n&lt;/div&gt;\n);\n</code></pre> <p>Success</p> <p>Now you should have a working onClick event listener which will alert the browser with the value you clicked inside the chosen day.</p>"},{"location":"pages/glossary/","title":"Glossary","text":""},{"location":"pages/project-structure/","title":"Project Structure","text":""},{"location":"pages/project-structure/#overview","title":"Overview","text":"<p>Having a clear project structure is essential to collaborate on a web application. Also, it is important as it helps developers create new files following the existing conventions and helps them edit the existing files.</p> <p>We can create a new react application using the following command</p> <p><pre><code>npx create-react-app calendar\n</code></pre> React provide a solid structure to work upon. The default file structure after creating a new react application would look like the below:</p> <pre><code>calendar-test\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 public\n\u2502   \u251c\u2500\u2500 favicon.ico\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u251c\u2500\u2500 logo192.png\n\u2502   \u251c\u2500\u2500 logo512.png\n\u2502   \u251c\u2500\u2500 manifest.json\n\u2502   \u2514\u2500\u2500 robots.txt\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 App.css\n    \u251c\u2500\u2500 App.js\n    \u251c\u2500\u2500 App.test.js\n    \u251c\u2500\u2500 index.css\n    \u251c\u2500\u2500 index.js\n    \u251c\u2500\u2500 logo.svg\n    \u251c\u2500\u2500 reportWebVitals.js\n    \u2514\u2500\u2500 setupTests.js\n</code></pre> <p>Furture there are other ways to struture the app</p> <p>Info</p> <p>Grouping by features or routes</p> <pre><code>common/\n  Avatar.js\n  Avatar.css\n  APIUtils.js\n  APIUtils.test.js\nfeed/\n  index.js\n  Feed.js\n  Feed.css\n  FeedStory.js\n  FeedStory.test.js\n  FeedAPI.js\nprofile/\n  index.js\n  Profile.js\n  ProfileHeader.js\n  ProfileHeader.css\n  ProfileAPI.js\n</code></pre> <p>Info</p> <p>Grouping by file type</p> <pre><code>api/\n  APIUtils.js\n  APIUtils.test.js\n  ProfileAPI.js\n  UserAPI.js\ncomponents/\n  Avatar.js\n  Avatar.css\n  Feed.js\n  Feed.css\n  FeedStory.js\n  FeedStory.test.js\n  Profile.js\n  ProfileHeader.js\n  ProfileHeader.css\n</code></pre>"},{"location":"pages/project-structure/#creating-and-navigating-between-files-and-folders","title":"Creating and navigating between files and folders","text":"<p>Create a new directory test</p> <p>mkdir test</p> <p>Change directory</p> <p>cd test</p> <p>Create a new javascript file</p> <p>touch calendar.js</p> <p>Opening file in Visual Studio Code</p> <p>code calendar.js</p>"},{"location":"pages/project-structure/#conclusion","title":"Conclusion","text":"<p>Success</p> <p>By the end of this section, you will have successfully learned the following:</p> <ul> <li>Why project structure is important</li> <li>Different styles of project structures</li> <li>How to customize the project structure</li> </ul>"},{"location":"pages/setup/","title":"Installing React Calendar","text":""},{"location":"pages/setup/#overview","title":"Overview","text":"<p>In this section I will walk you through the installation of React Calendar which involves creating a new project directory, installing React 16.3 or later, and importing the Calendar component in the App.js file. </p>"},{"location":"pages/setup/#installation-steps-for-react-calendar","title":"Installation Steps for React Calendar","text":"<p>Warning</p> <p>As for Compatibility, your project needs to use React 16.3 or later.</p> <p>React Calendar uses modern web technologies. That's why it's so fast, lightweight and easy to style. This, however, comes at a cost of supporting only modern browsers.</p> <ol> <li>Create a new project directory <p>npx create-react-app my-app</p> </li> <li>Open your terminal <p>cd my-app</p> </li> <li>Run the following commands in order: <p>npm start</p> </li> </ol> <p> 4. In <code>my-app/src/App.js</code> import react-calendar <pre><code>import Calendar from 'react-calendar'\n</code></pre> 5. return the Calendar component in your App function <pre><code>return (\n&lt;Calendar /&gt;\n);\n</code></pre></p> <p>Example of <code>/App.js</code> file: <pre><code>import './App.css';\nimport Calendar from 'react-calendar'\nfunction App() {\nreturn (\n&lt;Calendar /&gt;\n);\n}\nexport default App;\n</code></pre></p> <p>Everything you need to access/manipulate with React Calendar is going to be found on the Calendar Components props. You can find more about the interactivity and customization of your calendar here: Event Listeners, Styling</p>"},{"location":"pages/setup/#start-react-app","title":"Start React App","text":"<p>Note: Replace \"my-app\" with whatever you'd like to name your app.</p> <ol> <li>Change into your app directory by running the following command: <p>cd my-app</p> </li> <li>Start your React app by running the following command: <p>npm start</p> </li> </ol> <p>This should automatically open up your app in your systems default web browser.</p>"},{"location":"pages/setup/#conclusion","title":"Conclusion","text":"<p>Success</p> <p>Indicates what success looks like.</p> <p>You should now have a working React Calendar in your React Application. Great work!</p>"},{"location":"pages/styling/","title":"Styling","text":""},{"location":"pages/styling/#overview","title":"Overview","text":"<p>React Calendar is fully open-source providing flexibility to all developers to use the calendar as they choose. As for the overall appearance of your calendar, we recommend importing our default css stylesheet and tweak accordingly as this calendar component was meant to handle the javascript logic for you.</p> <p>The first image shows what it will look like after setting up.</p> <p>The second image shows the Calendar with the default stylesheet imported.</p> <p> </p>"},{"location":"pages/styling/#customization","title":"Customization","text":"<p>Customizing your Calendar Custom styling - If you want to use default React-Calendar styling to build upon its existings syles, you can import React-Calendar's styles by importing react-calendars default css file (this will make it easier to customize as you can see existing styles): <pre><code>import 'react-calendar/dist/Calendar.css';\n</code></pre></p> <p>You can either manually copy the css file for the Calendar component and make changes as you wish <pre><code>node_modules/react-calender/dist/Calender.css\n</code></pre> Or, you can either import the css file directly</p> <pre><code>import 'react-calendar/dist/Calendar.css';\n</code></pre> <p><code>Calendar.css</code> looks something like this: <pre><code>.react-calendar {\nwidth: 350px;\nmax-width: 100%;\nbackground: white;\nborder: 1px solid #a0a096;\nfont-family: Arial, Helvetica, sans-serif;\nline-height: 1.125em;\n}\n.react-calendar--doubleView {\nwidth: 700px;\n}\n.react-calendar--doubleView .react-calendar__viewContainer {\ndisplay: flex;\nmargin: -0.5em;\n}\n.react-calendar--doubleView .react-calendar__viewContainer &gt; * {\nwidth: 50%;\nmargin: 0.5em;\n}\n.react-calendar,\n.react-calendar *,\n.react-calendar *:before,\n.react-calendar *:after {\n-moz-box-sizing: border-box;\n-webkit-box-sizing: border-box;\nbox-sizing: border-box;\n}\n.react-calendar button {\nmargin: 0;\nborder: 0;\noutline: none;\n}\n.react-calendar button:enabled:hover {\ncursor: pointer;\n}\n.react-calendar__navigation {\nheight: 44px;\nmargin-bottom: 1em;\n}\n.react-calendar__navigation button {\nmin-width: 44px;\nbackground: none;\n}\n</code></pre></p>"},{"location":"pages/troubleshooting/","title":"Troubleshooting","text":"Symptoms Probable Cause Action Unable to load the localhost page Your URL does not match your port number. Double check in the browser if the app is running on localhost 3000. The port 3000 is already taken You can free a port using <code>killall node</code> command in the terminal. No module found Missing dependencies Installl the missing dependencies using <code>npm install dependency-name</code> Conflicting dependencies Dependencies/Packages are incompatible. <code>npm install</code> gives error use <code>npm install --legacy-peer-deps</code> instead."}]}